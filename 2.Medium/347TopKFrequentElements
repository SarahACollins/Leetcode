/*
* Sarah Collins 5/11/2025
* 
* Written in: C#
*
* 347. Given an integer array nums and an integer k, return the k most frequent elements. You 
* may return the answer in any order.
*/

public class Solution {
    public int[] TopKFrequent(int[] nums, int k) {

        Dictionary<int, int> numsDict = new Dictionary<int, int>();

        // 1. Count frequencies
        for (int i = 0; i < nums.Length; i++) {
            if (numsDict.ContainsKey(nums[i])) {
                numsDict[nums[i]]++;
            } else {
                numsDict.Add(nums[i], 1);
            }
        }

        // 2. Sort frequencies into buckets
        List<int>[] buckets = new List<int>[nums.Length + 1];
        foreach (var pair in numsDict) {
            // Get the frequency of the current pair
            int freq = pair.Value;
            
            // If there is not a bucket at that frequency, create one
            if (buckets[freq] == null) {
                buckets[freq] = new List<int>();
            }

            // Add the value to that bucket
            buckets[freq].Add(pair.Key);
        }

        // 3. Find k most frequent
        int[] kMostFreq = new int[k]; 
        int count = 0;
        // Loop backwards through the buckets - so start with the "most frequent" bucket
        for (int i = buckets.Length - 1; i >= 0; i--) {
            if (buckets[i] != null) {
                // Loop through the bucket and add all numbers within the bucket to the return
                for (int j = 0; j < buckets[i].Count; j++) {
                    if (count < k) {
                        kMostFreq[count] = buckets[i][j];
                        count++;
                    } else {
                        return kMostFreq;
                    }
                }
            }
        }

        return kMostFreq;
    }
}